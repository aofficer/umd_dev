<?php

/***********************************
 * There's a lot of little things on the UI that need tweaking. This module handles that.
 */

/** Implements hook_init() **/
function ui_steez_init() {
  // add some global styles
  drupal_add_css(drupal_get_path('module', 'ui_steez') . '/global_steez.css');
}

/** Implements hook_menu() **/
function ui_steez_menu() {
  $menu = array();
  
  $menu['admin/config/settings-steez/ui-steez'] = array(
    'title' => 'User interface',
    'description' => 'Little settings to make the UI steezy.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ui_steez_settings'),
    'access arguments' => array('administer site configuration'),
  );
  
  return $menu;
}

/** Implements hook_menu_alter() **/
function ui_steez_menu_alter(&$items) {
  $initiative_entity = variable_get('settings_initiative_entity', 'initiative');
  //$items[$initiative_entity . '/%node/admin'] = $items['nnode']
  $items['user/%user/view']['title'] = t('Profile');
  
  //printr($items);return;
  // we want to make sure local task pages actually get a title which reflects the name of the initiative
  $items['initiative/%pm_arg']['title callback'] = 'ui_steez_initiative_title_callback';
  $items['initiative/%pm_arg']['title arguments'] = array(1);
}

function ui_steez_initiative_title_callback($arg) {
  //printr($arg);
  
  return $arg->data->title;
}

/** Implements hook_menu_local_tasks_alter(). We are adding local task links **/
function ui_steez_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  //print $root_path;
  //drupal_set_message(gprint_r($router_item));
  $initiative_entity = variable_get('settings_initiative_entity', 'initiative');
  //drupal_set_message($initiative_entity);
  $root_args = explode('/', $root_path);
  //printr($root_args);
  if (count($root_args) == 3 && 1==0) {
    if ($root_args[0] == 'initiative' && $root_args[1] == '%') {
      if (in_array(helpers_arg_to_content_type_map($root_args[2]), helpers_get_initiative_audience_bundles())) {
        // we are viewing a page in the group that lists node of a certain content type
        // add some steezasaurus to it
        $node_type = helpers_arg_to_content_type_map($root_args[2]);
        //print $node_type;
        $path = $router_item['href'];
        $args = explode('/', $path);
        $nid = $args[1];
        $item = menu_get_item('node/add/' . $node_type);
        if ($item['access']) {
          $item['title'] = ui_steez_add_content_title_callback($node_type, $item['title']);
          $item['localized_options'] = ui_steez_add_content_query_params($item['localized_options'], $node_type, $nid);
          $data['actions']['output'][] = array(
            '#theme' => 'menu_local_action',
            '#link' => $item,
          );
        }
      }
    }
  }
  else {
    switch ($root_path) {
      case $initiative_entity . '/%':
        $path = $router_item['href'];
        $args = explode('/', $path);
        $nid = $args[1];
        $initiative_bundles = ui_steez_get_initiative_audience_bundles($initiative_entity);
        //drupal_set_message(print_r($initiative_bundles, 1));
        //return;
        foreach ($initiative_bundles as $bundle) {
          $item = menu_get_item('node/add/' . $bundle);
          if ($item['access']) {
            $item['title'] = ui_steez_add_content_title_callback($bundle, $item['title']);
            $item['localized_options'] = ui_steez_add_content_query_params($item['localized_options'], $bundle, $nid);
            //drupal_set_message(gprint_r($item));
            $data['actions']['output'][] = array(
              '#theme' => 'menu_local_action',
              '#link' => $item,
            );
          }
        }
        $files_menu_item = menu_get_item($initiative_entity . '/' . $nid . '/files/upload');
        if ($files_menu_item['access']) {
          $data['actions']['output'][] = array(
            '#theme' => 'menu_local_action',
            '#link' => $files_menu_item,
          );
        }
        break;
      /*case $initiative_entity . '/%/calendar':
        $path = $router_item['href'];
        $args = explode('/', $path);
        $nid = $args[1];
        $item = menu_get_item('node/add/event');
        if ($item['access']) {
          $item['title'] = ui_steez_add_content_title_callback('event', $item['title']);
          $item['localized_options'] = ui_steez_add_content_query_params($item['localized_options'], 'event', $nid);
          $data['actions']['output'][] = array(
            '#theme' => 'menu_local_action',
            '#link' => $item,
          );
        }
        break;*/
      case 'initiative':
      case 'document':
        $item = menu_get_item('node/add/document');
        if ($item['access']) {
          $item['title'] = t('New initiative');
          $data['actions']['output'][] = array(
            '#theme' => 'menu_local_action',
            '#link' => $item,
          );
        }
        break;
      case 'assessments':
      case 'assessments/2':
      case 'assessments/3':
      case 'assessments/4':
        $item = menu_get_item('node/add/survey');
        if ($item['access']) {
          $item['title'] = t('New assessment');
          $data['actions']['output'][] = array(
            '#theme' => 'menu_local_action',
            '#link' => $item,
          );
        }
        break;
      case 'node/%/submission/%':
        $assessment_part = $router_item['page_arguments'][0]->field_assessment_part['und'][0]['value'];
        if ($assessment_part == 1) {
          $menu_item = 'assessments';
        }
        else {
          $menu_item = 'assessments/' . $assessment_part;
        }
        $item = menu_get_item($menu_item);
        if ($item['access']) {
          $item['title'] = t('Back to assessments');
          $data['actions']['output'][] = array(
            '#theme' => 'menu_local_action',
            '#link' => $item,
          );
        }
        break;
      case 'library':
      case 'library/%':
        
        //$item = menu_get_item()
        break;
      case 'node/%/peer':
        $item = menu_get_item('assessments/4/peer');
        //printr($item);
        if ($item['access']) {
          $item['title'] = t('Back to Peer Benchmark');
          $data['actions']['output'][] = array(
            '#theme' => 'menu_local_action',
            '#link' => $item,
          );
        }
        break;
    }
  }
  
}

function ui_steez_get_initiative_audience_bundles($entity) {
  $query = "SELECT DISTINCT(nga.type) FROM {node} ng
            LEFT JOIN {og} og ON ng.nid = og.etid
            LEFT JOIN {og_membership} ogm ON og.gid = ogm.gid
            LEFT JOIN {node} nga ON nga.nid = ogm.etid
            WHERE ng.type = :entity AND og.entity_type = 'node' AND ogm.entity_type = 'node'
              AND og.state = 1 AND ogm.state = 1";
  $result = db_query($query, array(':entity' => $entity));
  return $result->fetchCol();
}

function ui_steez_add_content_title_callback($node_type, $title) {
  switch ($node_type) {
    case 'webform':
      
      break;
  }
  
  return $title;
}

function ui_steez_add_content_query_params($options, $type, $nid) {
  switch ($type) {
    case 'webform':
      $options['query']['webform_type'] = 1;
      break;
  }
  
  $options['query']['initiative'] = $nid;
  
  return $options;
}

function ui_steez_settings() {
  $form = array();
  
  $form['ui_steez_initiative_add_content_menu_name'] = array(
    '#title' => t('Initiative add content menu name'),
    '#type' => 'select',
    '#default_value' => variable_get('ui_steez_initiative_add_content_menu_name', ''),
    '#options' => menu_get_menus(),
  );
  
  return system_settings_form($form);
}

// we are going to provide a mechanism for setting the default value for group audience
// the default form sucks and this is the workflow I want
function ui_steez_form_node_form_alter(&$form, &$form_state, $form_id) {
  //printr($form);
  //printr($form);
  /*$goto_path = 'initiative';
  if (!user_access('administer content') && $form['type']['#value'] !== 'initiative') {
    if (isset($_GET['initiative']) && is_numeric($_GET['initiative'])) {
      $node = node_load($_GET['initiative']);
      
      if ($node->type == 'initiative') {
        //print $form['type']['#value'];
        // extra special processing for certain node types
        switch ($form['type']['#value']) {
          case 'webform':
            if (isset($_GET['webform_type']) && is_numeric($_GET['webform_type'])) {
              break;
            }
            else {
              drupal_goto($goto_path);
            }
            break;
        }
        $perm = 'create ' . $form['type']['#value'] . ' content';
        //print $perm;
        if (og_user_access_entity($perm, 'node', $node)) {
          //printr('wut');
          //drupal_add_css(drupal_get_path('module', 'ui_steez') . '/ui_steez.css');
          $form['#attached']['css'] = array(
            drupal_get_path('module', 'ui_steez') . '/ui_steez.css',
          );
          $group = og_get_group('node', $node->nid);
          $form['group_audience']['und']['#default_value'][] = $group->gid;
          switch ($form['type']['#value']) {
            case 'webform':
              $form_type = taxonomy_term_load($_GET['webform_type']);
              if ($form_type) {
                //drupal_set_title(t($node->field_settings_add_stuff_title['und'][0]['value'], array('!content_type' => $form_type->name,
                //                                                                                   '!initiative_title' => $node->title)));
                $form['field_webform_type']['und']['#default_value'][0] = $_GET['webform_type'];
              }
              
              //printr($form);
              break;
            default:
              $bundles = field_info_bundles('node');
              //drupal_set_message(printr($node));
              drupal_set_title(t($node->field_settings_add_stuff_title['und'][0]['value'], array('!content_type' => $bundles[$form['type']['#value']]['label'],
                                                                                                 '!initiative_title' => $node->title)));
          }
          return;
        }
      }
    }
    drupal_goto($goto_path);
  }*/
}

/** Implements hook_ctools_plugin_directory **/
function ui_steez_ctools_plugin_directory($owner, $plugin_type) {
  // we'll be nice and limit scandir() calls
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/content_types';
  }
}

/** Implements hook_theme() **/
function ui_steez_theme($existing, $type, $theme, $path) {
  return array(
    'initiative_header' => array(
      'variables' => array('nid' => NULL), 
    ),
  );
}

/** Implements hook_url_outbound_alter() **/
function ui_steez_url_outbound_alter(&$path, &$options, $original_path) {
  $path_args = explode('/', $path);
  //printr($path_args);
  switch ($path_args[0]) {
    case 'node':
      if (count($path_args) == 2) {
        if (is_numeric($path_args[1])) {
          //print $path;
          $node = node_load($path_args[1]);
          if (in_array($node->type, helpers_get_initiative_audience_bundles())) {
            if (!empty($node->group_audience)) {
              $node_gid = $node->group_audience['und'][0]['gid'];
              $initiative = og_load_entity_from_group($node_gid);
              $path = 'initiative/' . $initiative->nid . '/node/' . $node->nid;
              //print $path;
            }
          }
          elseif ($node->type == 'initiative') {
            $path = 'initiative/' . $node->nid;
          }
        }
      }
      break;
  }
  //printr($path);
}

function ui_steez_admin_paths_alter(&$paths) {
  unset($paths['node/*/edit']);
  unset($paths['node/*/submission/*']);
}
