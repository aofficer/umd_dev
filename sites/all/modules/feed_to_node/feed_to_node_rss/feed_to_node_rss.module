<?php

/**
 * @file
 * Parsing of standard RSS feeds.
 */

/**
 * Implements hook_feed2node_info().
 * @desc This hook is needed to be able for users to pick this as 
 * there feed type.
 * Make sure the first layer of the array key is unique, 
 * in this case 'youtube_feed'.
 */
function feed_to_node_rss_feed2node_info() {
  $info = array();

  $info['rss_feed']['name'] = 'RSS'; // Display name of the feed type.
  $info['rss_feed']['parser'] = 'feed_to_node_rss_parser'; // The parser of
  // the feed that will give the needed items in a array.
  $info['rss_feed']['token'] = 'rss_feed'; // Token type
  // set the description for the feed, in case there is anything special the
  // user should do before or while entering the feed url.
  $info['rss_feed']['description'] = 'Load any standard RSS feed';

  return $info;
}

/**
 * Implements hook_token_info().
 */
function feed_to_node_rss_token_info() {
  $type = array(
    'name' => t('RSS feed'),
    'description' => t('Tokens related to items in a rss feed.'),
    'needs-data' => 'rss_feed',
  );

  $feed = array();
  // Core tokens for nodes.
  $feed['guid'] = array(
    'name' => t("RSS guid"),
    'description' => t("The unique ID of a rss item."),
  );

  $feed['pubDate'] = array(
    'name' => t("Published"),
    'description' => t("Published date of the item."),
    'type' => 'feed2node_date',
  );

  $feed['category'] = array(
    'name' => t("Category"),
    'description' => t("Category of the item."),
  );

  $feed['title'] = array(
    'name' => t("Title"),
    'description' => t("Title of the item."),
  );

  $feed['description'] = array(
    'name' => t("Description"),
    'description' => t("Description of the item."),
  );

  $feed['link'] = array(
    'name' => t("Link"),
    'description' => t("The url of the item"),
  );

  $feed['image'] = array(
    'name' => t("Image url"),
    'description' => t("The url to the image of the item"),
  );

  return array(
    'types' => array('rss_feed' => $type),
    'tokens' => array('rss_feed' => $feed),
  );
}

/**
 * Implemtens hook_tokens().
 */
function feed_to_node_rss_tokens($type, $tokens, $data = array(), $options = array()) {
  $replacements = array();
  if ($type == 'rss_feed' && !empty($data['rss_feed'])) {
    $feed = $data['rss_feed'];

    foreach ($tokens as $name => $original) {
      $name = explode(':', $name, 2);
      switch ($name[0]) {
        case 'guid':
          $replacements[$original] = $feed['guid'];
          break;

        case 'pubDate':
          $date = $feed['pubDate'];
          if (!empty($name[1])) {
            $date = token_replace('[feed2node_date:' . $name[1] . ']', $data = array('feed2node_date' => $date));
          }
          $replacements[$original] = $date;
          break;

        case 'category':
          $replacements[$original] = !empty($feed['category']) ? $feed['category'] : '';
          break;

        case 'title':
          $replacements[$original] = $feed['title'];
          break;

        case 'description':
          $replacements[$original] = $feed['description'];
          break;

        case 'link':
          $replacements[$original] = $feed['link'];
          break;

        case 'image':
          $feed['enclosure'] = !empty($feed['enclosure']) ? (array) $feed['enclosure'] : '';
          $replacements[$original] = !empty($feed['enclosure']['@attributes']['url']) ? $feed['enclosure']['@attributes']['url'] : '';
          break;
      }
    }
  }

  return $replacements;
}

/**
 * Get list of item from the feed.
 * 
 * @param string $feed
 *   Feed contains the contents of the url that was callled.
 * 
 * @return array
 *   The function that calls this function expects an list of items.
 */
function feed_to_node_rss_parser($feed) {
  $data = new SimpleXmlElement($feed);
  $items = array();
  foreach ($data->channel->item as $item) {
    $item = (array) $item;
    $items[$item['guid']] = (array) $item;
  }
  // Turn them around so we got the latest item on top.
  $items = array_reverse($items, TRUE);
  return $items;
}
